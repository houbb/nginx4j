# nginx.conf

# 定义运行Nginx的用户和组
user nginx;

# 主进程的PID文件存放位置
pid /var/run/nginx.pid;

# 事件模块配置
events {
    worker_connections 1024;  # 每个工作进程的最大连接数
}

# HTTP模块配置
http {
    # 定义一个 map 指令，根据请求的主机名设置后端服务器
    map $host $backend {
        default web1.example.com;
        host1.example.com web2.example.com;
        host2.example.com web3.example.com;
    }

    # 定义另一个 map 指令，根据用户代理设置变量
    map $http_user_agent $mobile {
        default 0;
        "~*iphone|android" 1;
    }

    # 示例变量
    set $example_variable "test_value";

    # 变量值匹配
    if ($example_variable = "test_value") {
        # 执行指令，例如设置另一个变量
        set $matched "yes";
    }

    include /etc/nginx/mime.types;  # MIME类型配置文件
    default_type application/octet-stream;  # 默认的MIME类型

    # 文件传输设置
    sendfile on;  # 开启高效文件传输
    # Keepalive超时设置
    keepalive_timeout 65;

    # 定义服务器块
    server {
        listen 8080;
        server_name 172.20.10.2:8080;  # 服务器域名
        # server_name 192.168.1.12:8080;  # 服务器域名

        # 单独为这个 server 启用 sendfile
        sendfile on;

        # 静态文件的根目录
        root D:\data\nginx4j;  # 静态文件存放的根目录
        index index.html index.htm;  # 默认首页

        # 如果需要为这个 server 单独配置 gzip，可以覆盖全局配置
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # 默认匹配
        location / {
            proxy_set_header X-DEFINE-PARAM myDefineParam;
            proxy_set_header X-DEFINE-HOST 127.0.0.1;

            # 增加或修改响应头 这里就提现了一些占位符的强大之处。下一次可以考虑支持
            add_header X-Response-Time 2024-06-08;

            # 删除响应头
            proxy_hide_header X-Unwanted-Header;

            # 占位符测试 v0.17.0
            set $myVal 1000;
            add_header X-MY-VAL $myVal;
            add_header X-MY-HOST $host;

            # if
            # 示例变量
            set $example_variable "test_value";

            # 正则表达式匹配
            if ($example_variable ~ "^test.*") {
                # 执行指令，例如设置头部
                add_header X-Matched "yes";
            }

            # 正则表达式匹配并忽略大小写
            if ($example_variable ~* "TEST.*") {
                # 执行指令，例如设置头部
                add_header X-Matched-IgnoreCase "yes";
            }

            # 正则表达式不匹配
            if ($example_variable !~ "^no_match$") {
                # 执行指令，例如返回 403
                return 403;
            }
        }
    }

    # 定义服务器块2
    server {
        listen 8081;
        server_name 192.168.1.12:8081;  # 服务器域名

        # 单独为这个 server 启用 sendfile
        sendfile on;

        # 静态文件的根目录
        root D:\data\nginx4j;  # 静态文件存放的根目录
        index index.txt; # 默认首页

        # 默认匹配
        location / {
            proxy_set_header X-DEFINE-PARAM myDefineParam;
            proxy_set_header X-DEFINE-HOST 127.0.0.2;

            # 增加或修改响应头 这里就提现了一些占位符的强大之处。下一次可以考虑支持
            add_header X-Response-Time 2024-06-09;

            # 删除响应头
            proxy_hide_header X-Unwanted-Header;
        }
    }

}